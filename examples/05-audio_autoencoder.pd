#N canvas 91 657 497 399 10;
#N canvas 812 274 972 875 autoencoder 0;
#X obj 190 373 readsf~;
#X obj 510 78 block~ 256;
#X obj 190 486 tabsend~ input;
#X obj 507 146 array define input 256;
#X obj 507 168 array define output 256;
#X obj 203 434 tabsend~ output;
#X obj 40 595 neuralnet 256 128 64 32 64 128 256;
#X obj 40 472 bang~;
#X obj 40 495 spigot, f 7;
#X msg 40 518 add;
#N canvas 1204 160 932 875 prepare_neuralnet 0;
#X msg 26 656 train;
#X msg 25 262 set_optimizer adam;
#X msg 26 763 validate;
#X msg 468 756 destroy;
#X msg 469 645 abort_training;
#X msg 469 160 predict_to prediction;
#X obj 468 779 s mnist_autoenc;
#X obj 25 140 s autoenc;
#X obj 25 208 s autoenc;
#X obj 25 285 s autoenc;
#X obj 26 466 s autoenc;
#X obj 26 575 s autoenc;
#X obj 26 679 s autoenc;
#X obj 26 786 s autoenc;
#X obj 469 103 s autoenc;
#X obj 469 183 s autoenc;
#X obj 469 668 s autoenc;
#X msg 26 354 shuffle_train_set;
#X obj 26 377 s autoenc;
#X msg 26 552 set_batch_size 256 10;
#X msg 25 185 set_loss_function mse;
#X obj 469 576 s autoenc;
#X msg 469 80 predict_from input;
#X text 23 25 1) set the activation functions;
#X text 23 161 2) set the loss function;
#X text 21 239 3) set the optimizer;
#X text 24 319 4) shuffle the training data set for better fitting the network;
#X text 23 420 5) set the number of epochs;
#X text 24 498 6) set the batch size (wait for the "batch size" message in Pd's console to move on). use 10% of the training data for validating (last argument);
#X text 25 612 7) train the model (this will take quite long \, depending on the total length of audio loaded as the training dataset;
#X text 27 711 8) validate the network (10% of the training data has been saved for validation \, see last argument to set_batch message \, point 8);
#X text 467 38 9) once trained \, click to get the input for predictions from the input array;
#X text 467 140 10) click to get the predictions in the prediction array;
#X text 468 604 if you want to abort the training process \, click the "abort_training" message;
#X text 468 714 destroy when done (this happens automatically if you delete [neuralnet] or if you close the patch;
#X msg 25 50 set_activation_function 0 leaky_relu \, set_activation_function 1 leaky_relu \, set_activation_function 2 bipolar_sigmoid \, set_activation_function 3 leaky_relu \, set_activation_function 4 leaky_relu \, set_activation_function 5 bipolar_sigmoid;
#X listbox 469 529 20 0 0 0 - - - 0;
#X text 468 492 11) if you're satisfied with the result of the training \, you can save the network;
#X msg 469 553 save models/\$1;
#X msg 26 443 set_epochs 80;
#X connect 0 0 12 0;
#X connect 1 0 9 0;
#X connect 2 0 13 0;
#X connect 3 0 6 0;
#X connect 4 0 16 0;
#X connect 5 0 15 0;
#X connect 17 0 18 0;
#X connect 19 0 11 0;
#X connect 20 0 8 0;
#X connect 22 0 14 0;
#X connect 35 0 7 0;
#X connect 36 0 38 0;
#X connect 38 0 21 0;
#X connect 39 0 10 0;
#X restore 44 787 pd prepare_neuralnet;
#X obj 507 188 array define prediction 256;
#X obj 603 661 tabreceive~ prediction;
#X obj 55 562 r autoenc;
#X floatatom 241 623 10 0 0 1 loss - - 0;
#X floatatom 200 646 10 0 0 1 accuracy - - 0;
#X floatatom 120 694 5 0 0 1 epoch - - 0;
#X floatatom 160 670 5 0 0 1 batch_step - - 0;
#X obj 126 519 bang~;
#X msg 126 566 predict;
#X obj 126 543 spigot, f 7;
#X obj 165 518 tgl 18 0 empty empty empty 0 -9 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 603 730 outlet~;
#X obj 79 322 bng 18 250 50 0 empty empty empty 0 -9 0 10 #fcfcfc #000000 #000000;
#X text 75 37 1) set mode;
#X msg 77 59 regression;
#X obj 77 82 s autoenc;
#X msg 77 150 add_arrays input output;
#X obj 77 173 s autoenc;
#X text 75 127 2) add the arrays where the audio will be stored;
#N canvas 708 260 420 789 load_audio_files 0;
#X obj 123 425 inlet;
#X obj 30 729 outlet;
#X obj 75 729 outlet;
#X msg 30 604 start;
#X obj 30 627 t b a;
#X msg 30 664 1;
#X msg 232 669 0;
#X obj 251 601 print audio_done;
#X obj 30 86 command;
#X obj 30 239 list;
#X obj 30 337 list split 1;
#X obj 43 506 list;
#X obj 30 558 t b a, f 8;
#X obj 30 581 del 100;
#X obj 43 529 route bang;
#X obj 162 535 symbol;
#X obj 162 582 print done;
#X obj 30 476 t a a;
#X obj 30 313 t l l;
#X obj 287 331 list length;
#X obj 287 495 - 1;
#X obj 232 513 sel;
#X obj 123 450 t b b b;
#X obj 30 361 t a a;
#X obj 134 402 print opening;
#X obj 232 538 t b b b;
#X msg 271 563 \; pd dsp 0;
#X obj 89 198 list prepend;
#X obj 89 221 t a a;
#X obj 232 488 f;
#X obj 262 488 + 1;
#X obj 30 8 inlet;
#X obj 49 160 print audio_file_dir;
#X obj 30 109 sel 0 1;
#X msg 49 135 error;
#X msg 247 464 0;
#X obj 30 263 t l b;
#X msg 86 281 \; pd dsp 1;
#X msg 162 558 \$1;
#X msg 134 379 \$1;
#X msg 30 63 exec ls ./recordings;
#X msg 75 627 open ./recordings/\$1;
#X obj 30 36 t b b;
#X connect 0 0 22 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 4 1 2 0;
#X connect 5 0 1 0;
#X connect 6 0 1 0;
#X connect 8 0 33 0;
#X connect 8 1 27 0;
#X connect 9 0 36 0;
#X connect 10 0 23 0;
#X connect 10 1 11 1;
#X connect 11 0 14 0;
#X connect 12 0 13 0;
#X connect 12 1 41 0;
#X connect 13 0 3 0;
#X connect 14 1 10 0;
#X connect 15 0 38 0;
#X connect 17 0 12 0;
#X connect 17 1 15 1;
#X connect 18 0 10 0;
#X connect 18 1 19 0;
#X connect 19 0 20 0;
#X connect 20 0 21 1;
#X connect 21 0 25 0;
#X connect 22 0 11 0;
#X connect 22 1 29 0;
#X connect 22 2 15 0;
#X connect 23 0 17 0;
#X connect 23 1 39 0;
#X connect 25 0 6 0;
#X connect 25 1 7 0;
#X connect 25 2 26 0;
#X connect 27 0 28 0;
#X connect 28 0 9 1;
#X connect 28 1 27 1;
#X connect 29 0 30 0;
#X connect 29 0 21 0;
#X connect 30 0 29 1;
#X connect 31 0 42 0;
#X connect 33 0 9 0;
#X connect 33 1 34 0;
#X connect 34 0 32 0;
#X connect 35 0 29 1;
#X connect 36 0 18 0;
#X connect 36 1 37 0;
#X connect 38 0 16 0;
#X connect 39 0 24 0;
#X connect 40 0 8 0;
#X connect 41 0 2 0;
#X connect 42 0 40 0;
#X connect 42 1 27 1;
#X restore 79 347 pd load_audio_files;
#X text 77 205 3) click the bang below to load the audio files to [neuralnet]. this can be done in batch mode to not wait for the actual duration of these files to pass. [pd load_audio_files] will load each file found in the "recordings" directory to [readsf~] below \, where the latter will play back these files one by one \, and will send its output to the "input" and "output" arrays \, where [neuralnet] reads from;
#X text 507 46 the block size must be equal to the number of inputs and outputs of the autoencoder;
#X text 505 107 arrays to write the input and outputa training data and the predictions of the trained autoencoder;
#X text 44 753 4) when loading the audio files is done \, prepare the neural network for training. open the subpatch below.;
#X listbox 510 535 20 0 0 0 - - - 0;
#X obj 537 661 readsf~;
#X text 188 517 <- open [spigot] to start predicting;
#X text 506 427 5) when done training and validating \, you can use the auto encoder. write the name of an audio file in the "recordings" directory to load and play it. this will be fed into [neuralnet]. the output of the autoencoder is played by [tabreceive~ prediction] below. you have to click on the toggle to the left so that [neuralnet] starts outputting predictions;
#X msg 510 614 start;
#X obj 537 730 outlet~;
#X obj 510 566 t b s;
#X obj 510 589 del 100;
#X msg 537 638 open ./recordings/\$1;
#X obj 549 693 s~ to_input;
#X obj 203 462 r~ to_input;
#X text 507 773 6) once you save the model \, you can open it with the signal-rate [neuralnet~]. open 07-audio_autoencoder_tilde.pd;
#X msg 551 614 stop;
#X connect 0 0 2 0;
#X connect 0 0 5 0;
#X connect 0 1 30 1;
#X connect 6 2 16 0;
#X connect 6 3 17 0;
#X connect 6 4 15 0;
#X connect 6 5 14 0;
#X connect 7 0 8 0;
#X connect 8 0 9 0;
#X connect 9 0 6 0;
#X connect 12 0 22 0;
#X connect 13 0 6 0;
#X connect 18 0 20 0;
#X connect 19 0 6 0;
#X connect 20 0 19 0;
#X connect 21 0 20 1;
#X connect 23 0 30 0;
#X connect 25 0 26 0;
#X connect 27 0 28 0;
#X connect 30 0 8 1;
#X connect 30 1 0 0;
#X connect 35 0 41 0;
#X connect 36 0 40 0;
#X connect 36 0 44 0;
#X connect 39 0 36 0;
#X connect 41 0 42 0;
#X connect 41 1 43 0;
#X connect 42 0 39 0;
#X connect 43 0 36 0;
#X connect 45 0 2 0;
#X connect 47 0 36 0;
#X restore 55 184 pd autoencoder;
#X obj 55 287 output~;
#X text 58 26 This example shows how to train an audio autoencoder with [neuralnet]. Everything happens in the [pd autoencoder] subpatch because the block size where [neuralnet] is must be equal to the number of inputs and outputs of the autoencoder. Open the subpatch below for details.;
#X text 58 111 This example uses the [comport] external object. It is not necessary to use it \, check the [pd laod_audio_files] subpatch inside [pd autoencoder];
#X obj 55 261 *~ 1;
#X obj 135 261 *~ 1;
#X obj 159 233 hsl 153 18 0 1 0 0 empty empty empty -2 -9 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 79 213 hsl 153 18 0 1 0 0 empty empty empty -2 -9 0 10 #fcfcfc #000000 #000000 0 1;
#X connect 0 0 4 0;
#X connect 0 1 5 0;
#X connect 4 0 1 0;
#X connect 5 0 1 1;
#X connect 6 0 5 1;
#X connect 7 0 4 1;
