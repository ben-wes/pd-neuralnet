#N canvas 602 134 793 1008 10;
#X declare -path abstractions;
#X obj 38 921 dac~ 1;
#X obj 337 921 dac~ 2;
#X obj 409 618 smooth~;
#X obj 465 618 smooth~;
#X obj 521 618 smooth~;
#X obj 578 618 smooth~;
#X obj 443 731 smooth~;
#X obj 499 731 smooth~;
#X obj 555 731 smooth~;
#X obj 612 731 smooth~;
#X obj 89 618 smooth~;
#X obj 142 618 smooth~;
#X obj 194 618 smooth~;
#X obj 245 618 smooth~;
#X obj 129 731 smooth~;
#X obj 185 731 smooth~;
#X obj 241 731 smooth~;
#X obj 298 731 smooth~;
#X obj 39 301 list prepend add;
#X obj 39 324 list trim;
#X msg 47 205 augment;
#X msg 56 248 clear;
#X msg 96 248 show;
#X obj 150 304 bng 15 250 50 0 empty empty done 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 51 363 r neural_msg;
#N canvas 537 262 781 644 training_dataset 0;
#X obj 44 139 t l b;
#X obj 44 259 t l b;
#X obj 44 379 t l b;
#X obj 44 499 t l b;
#X obj 44 601 outlet;
#X obj 44 548 s out_training_data;
#X obj 44 428 s out_training_data;
#X obj 44 308 s out_training_data;
#X obj 44 188 s out_training_data;
#X obj 44 578 r out_training_data;
#X obj 191 188 s in_training_data;
#X obj 191 308 s in_training_data;
#X obj 191 428 s in_training_data;
#X obj 191 548 s in_training_data;
#X obj 191 578 r in_training_data;
#X obj 191 601 outlet;
#X text 412 108 damp \, non-harmonic - bottom-left;
#X text 407 227 damp \, harmonic - bottom-right;
#X text 405 348 bright \, non-harmonic \, top-left;
#X text 395 469 bright \, harmonic \, top-right;
#X msg 191 277 10 10;
#X msg 44 223 125 0.25 5 4.56 2.3 249.9 0.25 5 3.8 2.3 125.08 0.252 5.02 4.35 2.2 249.8 0.251 5.03 3.9 2.1;
#X msg 44 103 111 0.33 3.2 4 2 262.8 0.33 3.4 4 2 102.5 0.3301 3.11 4.01 2.01 278.3 0.3302 3.33 4.02 2.02;
#X msg 44 343 136.85 0.33 3.2 16 8 221.05 0.33 3.4 16 8 113 0.3302 4.02 15.95 8.02 232.4 0.3301 4.03 15.98 8.02;
#X msg 44 463 100 0.25 5 16 8 200.2 0.25 5 16 8 100.2 0.251 5.05 15.92 7.96 201.1 0.251 5.01 15.95 7.95;
#X msg 191 157 2229 10;
#X msg 191 397 2229 1389;
#X msg 191 517 10 1389;
#X text 43 18 Before clicking on the messages below \, you might need to change the coordinates on the first \, third \, and fourth group. These should match your monitor's maximum width and height;
#X text 244 155 <- change first value if monitor's max width is different;
#X text 256 395 <- change both values if monitor's max width or height are different;
#X text 244 515 <- change first value if monitor's max height is different;
#X connect 0 0 8 0;
#X connect 0 1 25 0;
#X connect 1 0 7 0;
#X connect 1 1 20 0;
#X connect 2 0 6 0;
#X connect 2 1 26 0;
#X connect 3 0 5 0;
#X connect 3 1 27 0;
#X connect 9 0 4 0;
#X connect 14 0 15 0;
#X connect 20 0 11 0;
#X connect 21 0 1 0;
#X connect 22 0 0 0;
#X connect 23 0 2 0;
#X connect 24 0 3 0;
#X connect 25 0 10 0;
#X connect 26 0 12 0;
#X connect 27 0 13 0;
#X restore 39 178 pd training_dataset;
#X obj 538 406 spigot;
#X msg 538 429 predict \$1 \$2;
#X obj 538 452 s neural_msg;
#X obj 571 383 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 39 503 list split 10;
#X obj 39 278 augment_data 150 20;
#X msg 360 359 poll;
#X msg 402 359 nopoll;
#X floatatom 360 416 8 0 0 0 - - - 0;
#X floatatom 441 416 8 0 0 0 - - - 0;
#N canvas 829 285 365 315 mouse_state 0;
#X obj 30 20 inlet;
#X obj 83 118 outlet;
#X obj 143 118 outlet;
#X obj 30 60 cyclone/mousestate;
#X obj 56 138 pack;
#X obj 56 86 t f f;
#X obj 116 86 t f f;
#X obj 56 161 s mouse_coords;
#X connect 0 0 3 0;
#X connect 3 1 5 0;
#X connect 3 2 6 0;
#X connect 4 0 7 0;
#X connect 5 0 4 0;
#X connect 5 1 1 0;
#X connect 6 0 4 1;
#X connect 6 1 2 0;
#X restore 360 392 pd mouse_state;
#X msg 150 324 shuffle_train_set;
#X obj 150 347 s neural_msg;
#X obj 538 359 r mouse_coords;
#X floatatom 85 472 5 0 0 1 epochs - - 0;
#X floatatom 132 451 10 0 0 1 accuracy - - 0;
#X floatatom 156 427 10 0 0 1 loss - - 0;
#X obj 38 641 osc_abs/fm_3 125 0.33001 2.9993 8 4;
#X obj 353 641 osc_abs/fm_3 125.08 0.33003 2.9992 8 4;
#X obj 73 755 osc_abs/fm_3 249.89 0.33004 2.9995 8 4;
#X obj 387 755 osc_abs/fm_3 249.91 0.33006 2.9991 8 4;
#X obj 39 394 neuralnet 2 64 64 20;
#X obj 39 536 list split 5;
#X obj 353 536 list split 5;
#X obj 39 560 unpack f f f f f, f 35;
#X obj 39 618 smooth~;
#X obj 353 560 unpack f f f f f, f 38;
#X obj 353 618 smooth~;
#X obj 387 731 smooth~;
#X obj 387 680 unpack f f f f f, f 38;
#X obj 73 731 smooth~;
#X obj 73 680 unpack f f f f f, f 38;
#X floatatom 55 587 5 0 0 0 - - - 0;
#X floatatom 115 587 5 0 0 0 - - - 0;
#X floatatom 165 587 5 0 0 0 - - - 0;
#X floatatom 215 587 5 0 0 0 - - - 0;
#X floatatom 265 587 5 0 0 0 - - - 0;
#X floatatom 365 587 5 0 0 0 - - - 0;
#X floatatom 425 587 5 0 0 0 - - - 0;
#X floatatom 477 587 5 0 0 0 - - - 0;
#X floatatom 535 587 5 0 0 0 - - - 0;
#X floatatom 588 587 5 0 0 0 - - - 0;
#X floatatom 405 707 5 0 0 0 - - - 0;
#X floatatom 465 707 5 0 0 0 - - - 0;
#X floatatom 517 707 5 0 0 0 - - - 0;
#X floatatom 575 707 5 0 0 0 - - - 0;
#X floatatom 628 707 5 0 0 0 - - - 0;
#X floatatom 85 707 5 0 0 0 - - - 0;
#X floatatom 145 707 5 0 0 0 - - - 0;
#X floatatom 197 707 5 0 0 0 - - - 0;
#X floatatom 255 707 5 0 0 0 - - - 0;
#X floatatom 308 707 5 0 0 0 - - - 0;
#X obj 497 171 declare -path abstractions;
#X text 40 144 1) open the subpatch below \, and click on the messages \, one by one;
#X text 105 201 2) click the "augment" message \, to augment the training dataset;
#X text 216 242 3) open the subpatch below to train the network;
#N canvas 908 293 1071 868 neuralnet_settings 0;
#X msg 87 149 set_activation_function 0 sigmoid \, set_activation_function 1 sigmoid \, set_activation_function 2 linear;
#X text 86 127 2) set the activation functions;
#X msg 87 230 set_loss_function mse;
#X text 87 208 3) set the loss function;
#X msg 87 299 set_optimizer adam;
#X text 84 277 4) set the optimizer;
#X text 85 54 1) set the mode of the network;
#X text 84 347 5) set the learning rate;
#X text 86 419 6) set the decay of the learning rate;
#X text 86 485 7) set number of epochs;
#X obj 87 101 s neural_msg;
#X obj 87 185 s neural_msg;
#X obj 87 253 s neural_msg;
#X obj 87 322 s neural_msg;
#X obj 87 394 s neural_msg;
#X obj 87 463 s neural_msg;
#X obj 87 533 s neural_msg;
#X obj 86 616 s neural_msg;
#X obj 483 175 s neural_msg;
#X msg 86 593 desired_accuracy 0.6;
#X msg 483 55 shuffle_train_set;
#X obj 483 78 s neural_msg;
#X text 84 556 8) set a desired minimum accuracy if you want to be able to retraing the model without needing to send a new dataset;
#X msg 483 280 release_mem;
#X obj 483 303 s neural_msg;
#X msg 483 153 train 10;
#X msg 483 354 validate;
#X obj 483 377 s neural_msg;
#N canvas 719 482 593 323 save_and_load 0;
#X listbox 50 27 20 0 0 0 - - - 0;
#X listbox 50 147 20 0 0 0 - - - 0;
#X text 185 22 write a name for the model you want to save \, without file extension (default is .ann). it will be saved in the models subdirectory of this directory;
#X text 200 142 write the name of the model you want to load \, without file extension \, saved in the models subdirectory (make sure you have first destroyed the network \, if you have already created one);
#X obj 50 74 s neural_msg;
#X obj 50 196 s neural_msg;
#X msg 50 50 save models/\$1;
#X msg 50 173 load models/\$1;
#X connect 0 0 6 0;
#X connect 1 0 7 0;
#X connect 6 0 4 0;
#X connect 7 0 5 0;
#X restore 482 441 pd save_and_load;
#X msg 480 517 destroy;
#X obj 480 540 s neural_msg;
#X text 84 658 10) normalize your output values so that the network can function properly. input values will be normalized internally;
#X obj 86 748 s neural_msg;
#X text 482 32 11) when done creating your training data set \, shuffle it;
#X text 482 115 12) after shuffling \, train the network with 10% kept for validating;
#X text 482 330 14) validate your model;
#X text 482 207 13) after training \, if the accuracy hasn't reached the desired accuracy value set in step 8 \, if you want to try predictions first click release_mem \, otherwise retrain (from scratch) \, or keep_training;
#X msg 562 280 retrain;
#X msg 615 280 keep_training;
#X text 480 407 15) if you want to save your model \, open this subpatch for info;
#X text 479 479 16) you can destroy the network when done \, but it will be destroyed when the patch is closed \, anyway;
#X msg 87 510 set_epochs 2000;
#X msg 87 75 regression;
#X msg 87 440 set_decay 5e-05;
#X msg 87 371 set_learning_rate 0.02;
#X msg 86 705 normalize_output 140 1 5 16 4 270 1 5 16 4 140 1 5 16 4 270 1 5 16 4 \, normalize_input 2239 1399;
#X connect 0 0 11 0;
#X connect 2 0 12 0;
#X connect 4 0 13 0;
#X connect 19 0 17 0;
#X connect 20 0 21 0;
#X connect 23 0 24 0;
#X connect 25 0 18 0;
#X connect 26 0 27 0;
#X connect 29 0 30 0;
#X connect 37 0 24 0;
#X connect 38 0 24 0;
#X connect 41 0 16 0;
#X connect 42 0 10 0;
#X connect 43 0 15 0;
#X connect 44 0 14 0;
#X connect 45 0 32 0;
#X restore 216 263 pd neuralnet_settings;
#X text 359 298 4) once trained \, click the "poll" message below \, and the toggle to the right \, to start getting predictions based on your mouse coordinates;
#X text 43 28 This example uses the X/Y coordinates of the mouse to control twenty parameters of a synthesizer. It uses [cyclone/mousestate].;
#X obj 337 895 *~;
#X obj 38 895 *~;
#X obj 177 826 smooth~;
#X obj 180 801 hsl 153 18 0.01 1 1 0 empty empty volume 6 9 0 10 #fcfcfc #000000 #000000 0 1;
#X connect 2 0 44 1;
#X connect 3 0 44 2;
#X connect 4 0 44 3;
#X connect 5 0 44 4;
#X connect 6 0 46 1;
#X connect 7 0 46 2;
#X connect 8 0 46 3;
#X connect 9 0 46 4;
#X connect 10 0 43 1;
#X connect 11 0 43 2;
#X connect 12 0 43 3;
#X connect 13 0 43 4;
#X connect 14 0 45 1;
#X connect 15 0 45 2;
#X connect 16 0 45 3;
#X connect 17 0 45 4;
#X connect 18 0 19 0;
#X connect 19 0 47 0;
#X connect 20 0 31 0;
#X connect 21 0 31 0;
#X connect 22 0 31 0;
#X connect 24 0 47 0;
#X connect 25 0 31 0;
#X connect 25 1 31 1;
#X connect 26 0 27 0;
#X connect 27 0 28 0;
#X connect 29 0 26 1;
#X connect 30 0 48 0;
#X connect 30 1 49 0;
#X connect 31 0 18 0;
#X connect 31 1 23 0;
#X connect 32 0 36 0;
#X connect 33 0 36 0;
#X connect 36 0 34 0;
#X connect 36 1 35 0;
#X connect 37 0 38 0;
#X connect 39 0 26 0;
#X connect 43 0 86 0;
#X connect 44 0 85 1;
#X connect 45 0 86 0;
#X connect 46 0 85 1;
#X connect 47 0 30 0;
#X connect 47 2 40 0;
#X connect 47 4 41 0;
#X connect 47 5 42 0;
#X connect 48 0 50 0;
#X connect 48 1 57 0;
#X connect 49 0 52 0;
#X connect 49 1 55 0;
#X connect 50 0 51 0;
#X connect 50 0 58 0;
#X connect 50 1 10 0;
#X connect 50 1 59 0;
#X connect 50 2 11 0;
#X connect 50 2 60 0;
#X connect 50 3 12 0;
#X connect 50 3 61 0;
#X connect 50 4 13 0;
#X connect 50 4 62 0;
#X connect 51 0 43 0;
#X connect 52 0 53 0;
#X connect 52 0 63 0;
#X connect 52 1 2 0;
#X connect 52 1 64 0;
#X connect 52 2 3 0;
#X connect 52 2 65 0;
#X connect 52 3 4 0;
#X connect 52 3 66 0;
#X connect 52 4 5 0;
#X connect 52 4 67 0;
#X connect 53 0 44 0;
#X connect 54 0 46 0;
#X connect 55 0 54 0;
#X connect 55 0 68 0;
#X connect 55 1 6 0;
#X connect 55 1 69 0;
#X connect 55 2 7 0;
#X connect 55 2 70 0;
#X connect 55 3 8 0;
#X connect 55 3 71 0;
#X connect 55 4 9 0;
#X connect 55 4 72 0;
#X connect 56 0 45 0;
#X connect 57 0 56 0;
#X connect 57 0 73 0;
#X connect 57 1 14 0;
#X connect 57 1 74 0;
#X connect 57 2 15 0;
#X connect 57 2 75 0;
#X connect 57 3 16 0;
#X connect 57 3 76 0;
#X connect 57 4 17 0;
#X connect 57 4 77 0;
#X connect 85 0 1 0;
#X connect 86 0 0 0;
#X connect 87 0 86 1;
#X connect 87 0 85 0;
#X connect 88 0 87 0;
